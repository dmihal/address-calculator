{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CREATION_CODE","App","useState","deployer","setDeployer","nonce","setNonce","accounts","setAccounts","contractWallets","contractAddress","length","util","toString","internalDeployer","split","map","address","code","substr","makeWallet","value","onChange","e","target","type","style","display","flex","flexDirection","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAGMA,EAAgB,23EAuCPC,MArCf,WAAgB,IAAD,EACmBC,mBAAS,8CAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KAKTC,EAAkB,GAClBC,EAAkB,GAEtB,GAAwB,KAApBP,EAASQ,OAAe,CAC1BD,EAAkBE,kBAAqBT,EAAUE,EAAMQ,YACvD,IAAMC,EAAmBF,kBAAqBF,EAAiB,KAO/DD,EAAkBF,EACfQ,MAAM,MACNC,KAAI,SAAAC,GAAO,OAAIL,iBAAoBK,GAPnB,SAAAA,GACjB,IAAMC,EAAI,UAAMlB,EAAN,mCAA8CY,cAAiBF,GAAiBS,OAAO,GAAvF,mCAAoHF,EAAQE,OAAO,IAC7I,OAAOP,cAAiBA,mBAAsBE,EAAkBF,gBAAmB,MAAO,IAAKM,IAKhDE,CAAWH,GAAW,MAGzE,OACE,6BACE,kDAAuB,2BAAOI,MAAOlB,EAAUmB,SAAU,SAAAC,GAAC,OAAInB,EAAYmB,EAAEC,OAAOH,WACnF,8CAAmB,2BAAOA,MAAOhB,EAAOoB,KAAK,SAASH,SAAU,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOH,WACvF,iDAAuBX,GAAmBE,cAAiBF,IAC3D,yBAAKgB,MAAO,CAAEC,QAAS,SACrB,yBAAKD,MAAO,CAAEE,KAAM,UAAWD,QAAS,OAAQE,cAAe,WAC7D,8BAAUR,MAAOd,EAAUe,SAAU,SAAAC,GAAC,OAAIf,EAAYe,EAAEC,OAAOH,WAEjE,yBAAKK,MAAO,CAAEE,KAAM,YAAanB,EAAgBqB,KAAK,UCxB1CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26418f25.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as util from 'ethereumjs-util';\n\nconst CREATION_CODE = '0x608060405234801561001057600080fd5b506040516104bb3803806104bb8339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505060405180807f6275726e65722d77616c6c65742d666163746f72790000000000000000000000815250601501905060405180910390207f36ea5a899f007351627d257f82d4383e5e83a8533e5a1c1d27d29a16d656070d60001b146100af57fe5b6100be8261028860201b60201c565b6060600073ffffffffffffffffffffffffffffffffffffffff1663485cc955905060e01b8383604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006101c26102b760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16826040518082805190602001908083835b6020831061020c57805182526020820191506020810190506020830392506101e9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461026c576040519150601f19603f3d011682016040523d82523d6000602084013e610271565b606091505b505090508061027f57600080fd5b5050505061037d565b60007f36ea5a899f007351627d257f82d4383e5e83a8533e5a1c1d27d29a16d656070d60001b90508181555050565b60006102c761034c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1663aaf10f426040518163ffffffff1660e01b815260040160206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d602081101561033657600080fd5b8101908080519060200190929190505050905090565b6000807f36ea5a899f007351627d257f82d4383e5e83a8533e5a1c1d27d29a16d656070d60001b9050805491505090565b61012f8061038c6000396000f3fe6080604052600a600c565b005b60186014601a565b60a4565b565b6000602260c9565b73ffffffffffffffffffffffffffffffffffffffff1663aaf10f426040518163ffffffff1660e01b815260040160206040518083038186803b158015606657600080fd5b505afa1580156079573d6000803e3d6000fd5b505050506040513d6020811015608e57600080fd5b8101908080519060200190929190505050905090565b3660008037600080366000845af43d6000803e806000811460c4573d6000f35b3d6000fd5b6000807f36ea5a899f007351627d257f82d4383e5e83a8533e5a1c1d27d29a16d656070d60001b905080549150509056fea265627a7a72305820755adf024dc0651882fcb04c8ddcf7af2d943a933e5658cff4cf3367867d977c64736f6c634300050a0032';\n\nfunction App() {\n  const [deployer, setDeployer] = useState('0x63f765e3df3eaaa39eb4b7f1241b500380e1d751');\n  const [nonce, setNonce] = useState(0);\n  const [accounts, setAccounts] = useState('');\n\n  let contractWallets = [];\n  let contractAddress = '';\n\n  if (deployer.length === 42) {\n    contractAddress = util.generateAddress(deployer, nonce.toString());\n    const internalDeployer = util.generateAddress(contractAddress, '1');\n\n    const makeWallet = address => {\n      const code = `${CREATION_CODE}000000000000000000000000${util.bufferToHex(contractAddress).substr(2)}000000000000000000000000${address.substr(2)}`\n      return util.bufferToHex(util.generateAddress2(internalDeployer, util.setLengthLeft('0x0', 32), code));\n    }\n\n    contractWallets = accounts\n      .split('\\n')\n      .map(address => util.isValidAddress(address) ? makeWallet(address) : '');\n  }\n\n  return (\n    <div>\n      <div>Factory deployer: <input value={deployer} onChange={e => setDeployer(e.target.value)} /></div>\n      <div>Deploy nonce: <input value={nonce} type=\"number\" onChange={e => setNonce(e.target.value)} /></div>\n      <div>Factory address: {contractAddress && util.bufferToHex(contractAddress)}</div>\n      <div style={{ display: 'flex'}}>\n        <div style={{ flex: '1 0 50%', display: 'flex', flexDirection: 'column' }}>\n          <textarea value={accounts} onChange={e => setAccounts(e.target.value)} />\n        </div>\n        <pre style={{ flex: '1 0 50%'}}>{contractWallets.join('\\n')}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}